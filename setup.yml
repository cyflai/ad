---
#- hosts: localhost
#  tasks:
  
#  - name: check requests-credssp is installed
#    pip:
#      name: requests-credssp
#      state: present
#  - name: check requests-credssp up to date
#    pip:
#      name: requests-credssp
#      state: latest

#  - pip:
#      name: pywinrm
#      state: latest

- hosts: pdc
  tasks:

  - name: AD promo
    win_domain:
      dns_domain_name: "{{ domain_name }}"
      safe_mode_password: "{{ ansible_password }}"
    register: domain_state

  - win_reboot:
    when: domain_state.reboot_required

  - win_file:
      path: C:\shares\quorum
      state: directory

  - win_share:
       name: quorum
       description: top secret share
       path: c:\shares\quorum
       list: yes
       full: Administrators

  - win_shell: (dcdiag | Select-String -Pattern 'passed test').Count
    register: result
    until: " result.stdout | int > 22"
    retries: 60
    delay: 10
    when: domain_state.reboot_required

- hosts: dc
  vars:
    share_quorum: \\{{hostvars[groups['pdc'][0]]['ansible_hostname']}}\quorum
  tasks:

  - win_dns_client:
      adapter_names: "*"
      ipv4_addresses: "{{ hostvars[groups['pdc'][0]]['ansible_host'] }}"

  - win_domain_membership:
      dns_domain_name: "{{ domain_name }}"
      domain_admin_user: "administrator@{{ domain_name }}"
      domain_admin_password: "{{ hostvars[groups['pdc'][0]]['ansible_password'] }}"
      state: domain
    register: domain_state

  - win_reboot:
    when: domain_state.reboot_required
 
  - win_shell: Enable-WSManCredSSP -Role Client -DelegateComputer *.{{ domain_name }} -force
  
  - set_fact:
      ansible_user: administrator@{{ domain_name }}
      ansible_password: "{{ hostvars[groups['pdc'][0]]['ansible_password'] }}"
      ansible_winrm_transport: credssp

  - win_feature:
       name: NET-Framework-Features
       state: present

  - win_feature:
       name: Failover-Clustering
       state: present
       include_management_tools: True

  - set_fact:
      node_setup: "{% for host in groups['dc'] %} {{ hostvars[host]['ansible_hostname'] }},{% endfor %}"
    run_once: yes

  - win_shell: test-cluster -node {{ node_setup | regex_replace(',$','') | regex_replace(' ','')}}
    run_once: yes
  
  - name: 'Crate New Cluster'
    win_shell: New-Cluster -Name {{ cluster_name }} -Node {{ node_setup | regex_replace(',$','') | regex_replace(' ','') }}  -StaticAddress {{ cluster_ip }} -NoStorage
    run_once: yes

  - name: 'Setup Quorum'
    win_shell: Set-ClusterQuorum -NodeAndFileShareMajority {{ share_quorum }}
    run_once: yes
  
  - win_shell: "{{ item }}"
    with_items:
      - "netsh -r {{ ansible_hostname }} advfirewall firewall add rule name=SQL dir=in action=allow protocol=TCP localport=1433"
      - "netsh -r {{ ansible_hostname }} advfirewall firewall add rule name=SQL dir=out action=allow protocol=TCP localport=1433"
      - "netsh -r {{ ansible_hostname }} advfirewall firewall add rule name=SQLRepl dir=in action=allow protocol=TCP localport=5022"
      - "netsh -r {{ ansible_hostname }} advfirewall firewall add rule name=SQLRepl dir=out action=allow protocol=TCP localport=5022"

  - set_fact:
      iso_path: "{{ ansible_env.TEMP }}\\SQLServer2017-x64-ENU.iso"
      config_file: "{{ ansible_env.TEMP }}\\config.ini"
    tags: sqlsetup

  - win_stat:
      path: "{{ iso_path }}" 
      get_checksum: yes
      checksum_algorithm: md5
    register: sql_iso

  - name: Download ISO to TEMP
    win_get_url:
      url: https://gitlab.hds-cloudconnect.com:8443/SQLServer2017-x64-ENU.iso
      dest: "{{ iso_path }}"
      force: yes
    when: 
     - (sql_iso.stat.exists == false ) or (sql_iso.stat.checksum != "334fc5f8fdd269fb2d6d5dc1fd61d1c7")

  - name: "Mount ISO"
    win_disk_image:
      image_path: "{{ iso_path }}"
    register: disk_image_result
    tags: sqlsetup

  - name: "Create User AGTSVCACCOUNT"
    win_domain_user:
      name: "{{ AGTSVCACCOUNT }}"
      firstname: "{{ AGTSVCACCOUNT }}"
      surname: "{{ AGTSVCACCOUNT }}"
      password: "{{ AGTSVCPASSWORD }}"
      upn: "{{ AGTSVCACCOUNT }}@{{ domain_name }}"
      state: present
    delegate_to: "{{ hostvars[groups['pdc'][0]]['inventory_hostname'] }}"

  - name: "Create User SQLSVCACCOUNT"
    win_domain_user:
      name: "{{ SQLSVCACCOUNT }}"
      firstname: "{{ SQLSVCACCOUNT }}"
      surname: "{{ SQLSVCACCOUNT }}"
      password: "{{ SQLSVCPASSWORD }}"
      upn: "{{ SQLSVCACCOUNT }}@{{ domain_name }}"
      state: present
    delegate_to: "{{ hostvars[groups['pdc'][0]]['inventory_hostname'] }}"

  - name: "copy PsExec to remote machine"
    win_copy:
       src: 'files/PsExec.exe'
       dest: 'C:\Windows\System32\PsExec.exe'

  - name: "SQL Installation"
    win_psexec:
      command: "{{ disk_image_result.mount_path }}setup.exe /INDICATEPROGRESS=False /Q /CONFIGURATIONFILE={{ config_file }}"
      elevated: yes 
    tags: sqlsetup
